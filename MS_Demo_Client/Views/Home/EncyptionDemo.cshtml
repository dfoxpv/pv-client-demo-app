@using MS_Demo_Client.Models
@model HomeViewModel
@{
    ViewBag.Title = "Micro Services Encryption Demo Page";
}

<div id="serviceDemo" data-bind="visible:true" style="display: none;">
    <div class="loading-mask" data-bind="visible: isLoading()">Loading.....</div>
    <div class="row form-group">
        <div class="col-sm-12">
            <h1>Encrypted Micro Services Demo Client</h1>
            <p>This page demonstrates the ability to request ecrypted data from the server.  The client can decrypt the data after being retrieved from the microservice.</p>
        </div>
    </div>
    <div class="panel panel-default">
        <div class="panel-body">
            <div class="row form-group">
                <div class="col-sm-3">
                    <select class="form-control" data-bind="options:services, optionsCaption: '--Choose a Service--', optionsText: 'name', optionsValue: 'id', value: selectedService"></select>
                </div>
                <div class="col-sm-3">
                    <select class="form-control" id="encryptedMethods1" data-bind="options: serviceMethods, optionsCaption: '--Choose a Service Method--', optionsText: 'name', optionsValue: 'url', value: selectedServiceMethod, enable: serviceMethods().length"></select>
                </div>
                <div class="col-sm-4">
                    <button type="button" id="btnMakeRequest" class="btn btn-primary" data-bind="click: loadServiceMethod, enable: enableGoButton()">GO <span class="glyphicon glyphicon-play"></span></button>
                    <button type="button" class="btn btn-default" data-bind="click: resetPage">Reset <i class="glyphicon glyphicon-refresh"></i></button>
                </div>
            </div>
        </div>
    </div>

    <div class="alert alert-danger" data-bind="visible: hasAjaxError()">
        <p><span data-bind="html: ajaxErrorMessage"></span></p>
    </div>


    <div class="encrypted-result" data-bind="visible:hasData() && isEncrypted()">
        <div class="row">
            <div class="col-sm-12">
                <div class="alert alert-info">
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="pull-right"><strong>Server Response Time:</strong> <span data-bind="text:serviceRequestTime"></span> ms</div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="pull-right"><strong>Total Data Retrieved:</strong> <span data-bind="text:totalData"></span> <span data-bind="text:dataMeasurement"></span></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="well well-lg">
            <div class="form-group"><strong>Encrypted Response <small>(<span data-bind="text:serviceRequestTime"></span> ms Response Time)</small></strong>
            </div>
            <div class="form-group" style="max-height: 400px; overflow-y: scroll;">
                <span style="word-break: break-all;" data-bind="text: encryptedData"></span>
            </div>
            <div>
                <button type="button" data-bind="click: decryptData" class="btn btn-success">Decrypt Response</button>
            </div>
        </div>
    </div>


    <div class="results-wrap" data-bind="visible:hasData() && showDecrypted()">
        <div class="row">
            <div class="col-sm-12">
                <h3>
                    Results <small>(URL: <span data-bind="text:selectedServiceMethod"></span>)</small>
                </h3>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                <div class="alert alert-info">
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="pull-left">
                                <strong>Total Results:</strong> <span data-bind="text:totalResults"></span>
                            </div>
                            <div class="pull-right"><strong>Server Response Time:</strong> <span data-bind="text:serviceRequestTime"></span> ms</div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="pull-right"><strong>Total Data Retrieved:</strong> <span data-bind="text:totalData"></span> <span data-bind="text:dataMeasurement"></span></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12">
                <div class="table-responsive">
                    <table class="table table-striped table-bordered">
                        <thead>
                            <tr>
                                <!-- ko foreach: resultColumns -->
                                <th><span data-bind="text:$data.displayName"></span></th>
                                <!-- /ko -->
                            </tr>
                        </thead>
                        <tbody>
                            <!-- ko foreach: results -->
                            <tr>
                                <!-- ko foreach: $root.resultColumns -->
                                <td><span data-bind="text: $parent[$data.name]"></span></td>
                                <!-- /ko -->
                            </tr>
                            <!-- /ko -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    /**Cascading Dropdowns Example: http://jsfiddle.net/GWVW8/2/ **/
    var ServiceMethodViewModel = function(itm, parent) {
        var self = this;

        if (itm === null || itm === 'undefined') return;

        self.serviceId = itm.ServiceId;
        self.name = itm.Name;
        self.path = itm.Path;
        self.url = parent.url + ':' + parent.port + '/' + self.path;
    };

    var ServiceViewModel = function(itm) {
        var self = this;

        if (itm === null || itm === 'undefined') return;

        self.id = itm.Id;
        self.name = itm.Name;
        self.url = itm.Url;
        self.port = itm.Port;
        self.methods = [];

        for (var i = 0; i < itm.EncryptedMethods.length; i++) {
            var method = new ServiceMethodViewModel(itm.EncryptedMethods[i], self);
            self.methods.push(method);
        }
    }

    var SearchServicesViewModel = function() {
        var self = this;

        function getById(items, value) {
            if(!value) {
                return [];
            }

            var result = ko.utils.arrayFirst(items, function(item) {
                return item.id === value;
            });

            return result && result.methods || [];
        }

        //Load Services
        self.services = [];
        self.selectedService = ko.observable();
        self.selectedServiceMethod = ko.observable('');

        for (var i = 0; i < serviceListData.dropDownData.length; i++) {
            var service = new ServiceViewModel(serviceListData.dropDownData[i]);
            self.services.push(service);
        }

        //Handle Change to Service Drop Down
        self.serviceMethods = ko.computed(function() {
            var items = self.services;
            var id = self.selectedService();
            return getById(items, id);
        });

        self.enableGoButton = ko.observable(false);
        self.selectedServiceMethod.subscribe(function(newVal) {
            var enableButton = self.serviceMethods().length > 0 && typeof newVal !== 'undefined';

            self.enableGoButton(enableButton);
        });

        self.isEncrypted = ko.observable(false);
        self.showDecrypted = ko.observable(false);
        self.encryptedData = ko.observable();

        //Service Response Data
        self.isLoading = ko.observable(false);
        self.hasData = ko.observable(false);
        self.serviceRequestTime = ko.observable(0);
        self.resultColumns = ko.observableArray();
        self.results = ko.observableArray([]);
        self.totalResults = ko.observable(0);
        self.totalDisplayed = ko.observable(50);
        self.maxRecordsToShow = 50;
        self.totalKb = ko.observable(0);
        self.totalBytes = ko.observable(0);
        self.dataMeasurement = ko.computed(function() {
            return self.totalBytes() >= 1000 ? "Kb" : "b";
        });

        self.totalData = ko.computed(function() {
            return self.totalBytes() >= 1000 ? self.totalKb() : self.totalBytes();
        });

        self.hasAjaxError = ko.observable(false);
        self.ajaxErrorMessage = ko.observable('');

        //Handle Get Service Method Click
        self.loadServiceMethod = function() {
            self.isLoading(true);
            self.showDecrypted(false);

            jQuery.ajax({
                type: 'POST',
                url: serviceListData.apiUrlBase + '/callmicroservice',
                data: {
                    url: self.selectedServiceMethod()
                }
            }).done(function(data) {
                self.hasData(true);
                self.serviceRequestTime(data.TimeElapsedMs);
                self.totalBytes(data.TotalBytes);
                self.totalKb(data.TotalKB);
                self.encryptedData(data.Data);
                self.isEncrypted(true);
            }).fail(function(requestObj, text, errorMessage) {
                self.hasAjaxError(true);

                var errorMessage = '<strong>Error:</strong> ' + requestObj.status + ' - ' + errorMessage;

                self.ajaxErrorMessage(errorMessage);

            }).always(function() {
                self.isLoading(false);
            });
        };

        self.decryptData = function () {
            self.isLoading(true);
            jQuery.ajax({
                type: 'POST',
                url: serviceListData.apiUrlBase + '/decryptserviceresponse',
                data: {data : self.encryptedData()}
            }).done(function(data) {
                self.hasData(true);
                self.totalBytes(data.TotalBytes);
                self.totalKb(data.TotalKB);

                var firstItemInResults = {};

                if (self.selectedServiceMethod().indexOf('services/e') !== -1) {
                    firstItemInResults = data.Data.services[0];
                    self.results(data.Data.services);
                } else {
                    firstItemInResults = data.Data[0];
                    self.results(data.Data);
                }

                self.totalResults(data.Data.length);

                self.resultColumns(serviceListData.generateColumnHeaders(firstItemInResults));
                self.hasAjaxError(false);
                self.isEncrypted(false);
                self.showDecrypted(true);
            }).fail(function(requestObj, text, errorMessage) {
                self.hasAjaxError(true);

                var errorMessage = '<strong>Error:</strong> ' + requestObj.status + ' - ' + errorMessage;

                self.ajaxErrorMessage(errorMessage);

            }).always(function() {
                self.isLoading(false);
            });;
        };

        self.resetPage = function() {
            self.hasData(false);
            self.selectedService(null);
            self.selectedServiceMethod(null);
            self.results([]);
            self.encryptedData(null);
            self.showDecrypted(false);
            self.isLoading(false);
            self.hasAjaxError(false);
            self.totalResults(0);
            self.totalBytes(0);
            self.totalKb(0);
            self.serviceRequestTime(0);
        };
    };

    jQuery(document).ready(function() {
        var vm = new SearchServicesViewModel();
        ko.applyBindings(vm, document.getElementById('serviceDemo'));
    });
</script>

